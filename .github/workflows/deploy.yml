name: Deployment

on:
  workflow_dispatch:
    inputs:
      destination:
        type: choice
        description: 'Environment'
        required: true
        options:
          - production
          - staging

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
      - uses: shivammathur/setup-php@master
        with:
          php-version: '8.1'
      - uses: actions/checkout@v3

      - name: Copy .env
        run: cp .env.testing .env

      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Generate key
        run: php artisan key:generate

      - name: Run PHPUnit
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: ':memory:'
        run: vendor/bin/phpunit
#
#  backup:
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.VPS_HOST }}
#          username: ${{ secrets.VPS_USERNAME }}
#          key: ${{ secrets.VPS_PRIVATE_KEY }}
#          fingerprint: ${{ secrets.VPS_PRIVATE_FINGERPRINT }}
#          port: 22
#          script: 'mkdir -p ~/builds/${{ github.event.repository.name }}/${{ github.event.inputs.destination }}/${{ github.run_number }}'
#
#  upload:
#    runs-on: ubuntu-latest
#
#    needs: backup
#
#    steps:
#      - uses: actions/checkout@master
#
#      - uses: appleboy/scp-action@master
#        with:
#          host: ${{ secrets.VPS_HOST }}
#          username: ${{ secrets.VPS_USERNAME }}
#          key: ${{ secrets.VPS_PRIVATE_KEY }}
#          fingerprint: ${{ secrets.VPS_PRIVATE_FINGERPRINT }}
#          source: './deploy.sh,./docker-stack.yml'
#          target: '~/builds/${{ github.event.repository.name }}/${{ github.event.inputs.destination }}/${{ github.run_number }}'

  cert:
    runs-on: ubuntu-latest
    steps:
      - run: |
          mkdir -p ./certs
          echo "\${CERT}" | tee ./certs/ca.crt

      - uses: franzbischoff/replace_envs@main
        env:
          CERT: ${{ secrets.PROD_REGISTRY_CA }}
        with:
          from_file: './certs/ca.crt'
          to_file: './certs/ca.crt'
          commit: 'false'

      - uses: actions/upload-artifact@master
        with:
          name: certificate
          path: ./certs/ca.crt

  env:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@master

      - name: Prepare Staging Env
        if: ${{ github.event.inputs.destination == 'staging'}}
        uses: franzbischoff/replace_envs@main
        env:
          GH_APP_KEY: ${{ secrets.APP_KEY_STAGING }}
          GH_DATABASE: ${{ secrets.DATABASE_STAGING }}
          GH_MAIL: ${{ secrets.MAIL_STAGING }}
          GH_TELEGRAM: ${{ secrets.TELEGRAM_STAGING }}
        with:
          from_file: '.env.${{ github.event.inputs.destination }}'
          to_file: '.env'
          commit: 'false'

      - name: Prepare Production Env
        if: ${{ github.event.inputs.destination == 'production'}}
        uses: franzbischoff/replace_envs@main
        env:
          GH_APP_KEY: ${{ secrets.APP_KEY_PRODUCTION }}
          GH_DATABASE: ${{ secrets.DATABASE_PRODUCTION }}
          GH_MAIL: ${{ secrets.MAIL_PRODUCTION }}
          GH_TELEGRAM: ${{ secrets.TELEGRAM_PRODUCTION }}
        with:
          from_file: '.env.${{ github.event.inputs.destination }}'
          to_file: '.env'
          commit: 'false'

      - uses: actions/upload-artifact@master
        with:
          name: dot-env
          path: .env

  build:
    runs-on: ubuntu-latest

    needs:
      - tests
      - cert
      - env

    strategy:
      matrix:
        container: ['app', 'cron']

    steps:
      - uses: actions/checkout@master

      - name: Remove Dotenvs
        run: rm .env.*

      - uses: actions/download-artifact@master
        with:
          name: certificate
          path: ./certs/ca.crt

      - uses: actions/download-artifact@master
        with:
          name: dot-env
          path: .env

      - run: |
          sudo mkdir -p /etc/docker/certs.d/${{ secrets.PROD_REGISTRY_HOST }}
          sudo mv ./certs/ca.crt /etc/docker/certs.d/${{ secrets.PROD_REGISTRY_HOST }}

      - run: rm -rf ./certs

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          config-inline: |
            [registry."${{ secrets.PROD_REGISTRY_HOST }}"]
              ca=["/etc/docker/certs.d/${{ secrets.PROD_REGISTRY_HOST }}/ca.crt"]

      - name: Login to DockerHub
        run: docker login -u ${{ secrets.PROD_REGISTRY_LOGIN }} --password-stdin ${{ secrets.PROD_REGISTRY_HOST }} <<< ${{ secrets.PROD_REGISTRY_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          context: .
          platforms: linux/arm64
          file: ./docker/${{ github.event.inputs.destination }}/${{ matrix.container }}/Dockerfile
          tags: ${{ secrets.PROD_REGISTRY_HOST }}/${{ github.event.repository.name }}/${{ matrix.container }}:latest

#  deploy:
#    runs-on: ubuntu-latest
#
#    needs:
#      - build
#      - upload
#
#    steps:
#      - uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.VPS_HOST }}
#          username: ${{ secrets.VPS_USERNAME }}
#          key: ${{ secrets.VPS_PRIVATE_KEY }}
#          fingerprint: ${{ secrets.VPS_PRIVATE_FINGERPRINT }}
#          port: 22
#          script: cd ~/builds/${{ github.event.repository.name }}/${{ github.event.inputs.destination }}/${{ github.run_number }} && deploy/${{ github.event.inputs.destination }}/deploy.sh
