name: Deployment

on:
  push:
    branches:
      - main
      - development

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
      - uses: shivammathur/setup-php@master
        with:
          php-version: '8.2'
      - uses: actions/checkout@v3

      - name: Copy Env
        run: cp .env.testing .env

      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist --ignore-platform-reqs

      - name: Generate Key
        run: php artisan key:generate

      - name: Run PHPUnit
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: ':memory:'
        run: vendor/bin/phpunit

  build:
    runs-on: ubuntu-latest

    needs:
      - tests

    strategy:
      matrix:
        container: ['app', 'cron']

    steps:
      - uses: actions/checkout@master

      - name: Prepare Env
        uses: franzbischoff/replace_envs@main
        env:
          GH_APP_KEY: ${{ secrets.APP_KEY_PRODUCTION }}
          GH_DATABASE: ${{ secrets.DATABASE_PRODUCTION }}
          GH_MAIL: ${{ secrets.MAIL_PRODUCTION }}
          GH_TELEGRAM: ${{ secrets.TELEGRAM_PRODUCTION }}
        with:
          from_file: '.env.production'
          to_file: '.env'
          commit: 'false'

      - name: Clean Up
        run: |
          rm .env.*
          rm -rf ./tests

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master

      - name: Login to DockerHub
        run: docker login -u ${{ secrets.PROD_REGISTRY_LOGIN }} --password-stdin ${{ secrets.PROD_REGISTRY_HOST }} <<< ${{ secrets.PROD_REGISTRY_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@master
        with:
          push: true
          context: .
          platforms: linux/amd64
          file: ./docker/production/${{ matrix.container }}/Dockerfile
          tags: ${{ secrets.PROD_REGISTRY_HOST }}/${{ github.event.repository.name }}/${{ matrix.container }}:latest

  deploy:
    runs-on: ubuntu-latest

    needs:
      - build

    steps:
      - uses: actions/checkout@master

      - name: Prepare Filesystem
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          fingerprint: ${{ secrets.VPS_PRIVATE_FINGERPRINT }}
          port: 22
          script: 'mkdir -p ~/builds/${{ github.event.repository.name }}/production/${{ github.run_number }}'

      - name: Upload
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          fingerprint: ${{ secrets.VPS_PRIVATE_FINGERPRINT }}
          source: './deploy/production/deploy.sh,./deploy/production/docker-stack.yml'
          target: '~/builds/${{ github.event.repository.name }}/production/${{ github.run_number }}'

#      - name: Deploy
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.VPS_HOST }}
#          username: ${{ secrets.VPS_USERNAME }}
#          key: ${{ secrets.VPS_PRIVATE_KEY }}
#          fingerprint: ${{ secrets.VPS_PRIVATE_FINGERPRINT }}
#          port: 22
#          script: |
#            cd ~/builds/${{ github.event.repository.name }}/production/${{ github.run_number }}/deploy/production
#            export REGISTRY=${{ secrets.PROD_REGISTRY }}
#            bash deploy.sh

